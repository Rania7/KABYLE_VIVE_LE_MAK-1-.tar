v_sim_setting_path='settings/v_sim_setting.yaml', nn_setting_path='settings/neural_network.yaml', rl_setting_path='settings/reinforcement_learning.yaml', run_setting_path='settings/running_and_training.yaml', if_adjust_v_sim_setting=False, v_sim_setting_max_length=10, v_sim_setting_aver_arrival_rate=0.1, v_sim_setting_aver_lifetime=1000, v_sim_setting_high_request=30, v_sim_setting_low_request=0, v_sim_setting_num_v_nets=1000, summary_dir='save/', summary_file_name='global_summary.csv', if_save_records=True, if_temp_save_records=True, node_resource_unit_price=1.0, link_resource_unit_price=1.0, time_window_size=100.0, solver_name='grc_rank', verbose=1, reusable=False, matching_mathod='greedy', shortest_method='bfs_shortest', node_ranking_method='order', link_ranking_method='order', k_shortest=10, allow_revocable=False, allow_rejection=False, rl_gamma=0.95, gae_lambda=0.98, explore_rate=0.9, lr=0.001, lr_actor=0.001, lr_critic=0.001, k_searching=3, decode_strategy='greedy', use_cuda=True, cuda_id=0, allow_parallel=False, batch_size=256, num_train_epochs=100, num_workers=10, target_steps=256, repeat_times=10, use_negative_sample=True, pretrained_model_path='', seed=None, num_epochs=1, if_save_config=True, embedding_dim=128, hidden_dim=128, num_layers=1, num_gnn_layers=5, dropout_prob=0.0, batch_norm=False, l2reg_rate=0.00025, coef_critic_loss=0.5, coef_entropy_loss=0.01, coef_mask_loss=0.01, use_baseline_solver=False, reward_weight=0.1, mask_actions=True, maskable_policy=True, norm_advantage=True, clip_grad=True, eps_clip=0.2, max_grad_norm=0.5, norm_value_loss=False, total_steps=5000000, sub_solver='nrm_rank', weight_decay=1e-05, only_test=False, renew_v_net_simulator=False, start_epoch=0, open_tb=True, save_dir='save', log_dir='log', save_interval=10, eval_interval=10, log_interval=1, 

p_net_setting={'num_nodes': 100, 'save_dir': 'dataset/p_net', 'topology': {'type': 'waxman', 'wm_alpha': 0.5, 'wm_beta': 0.2}, 'link_attrs_setting': [{'distribution': 'uniform', 'dtype': 'int', 'generative': True, 'high': 100, 'low': 50, 'name': 'bw', 'owner': 'link', 'type': 'resource'}, {'name': 'max_bw', 'originator': 'bw', 'owner': 'link', 'type': 'extrema'}, {'name': 'ltc', 'owner': 'link', 'type': 'latency', 'generative': True, 'distribution': 'customized', 'max': 1.0, 'min': 0.0}], 'node_attrs_setting': [{'name': 'cpu', 'distribution': 'uniform', 'dtype': 'int', 'generative': True, 'high': 100, 'low': 50, 'owner': 'node', 'type': 'resource'}, {'name': 'max_cpu', 'originator': 'cpu', 'owner': 'node', 'type': 'extrema'}], 'file_name': 'p_net.gml'}, 

v_sim_setting={'num_v_nets': 1000, 'topology': {'random_prob': 0.5, 'type': 'random'}, 'v_net_size': {'distribution': 'uniform', 'dtype': 'int', 'low': 2, 'high': 10}, 'arrival_rate': {'distribution': 'possion', 'dtype': 'float', 'lam': 0.04, 'reciprocal': True}, 'lifetime': {'distribution': 'exponential', 'dtype': 'float', 'scale': 1000}, 'node_attrs_setting': [{'name': 'cpu', 'distribution': 'uniform', 'dtype': 'int', 'generative': True, 'low': 0, 'high': 50, 'owner': 'node', 'type': 'resource'}], 'link_attrs_setting': [{'name': 'bw', 'distribution': 'uniform', 'dtype': 'int', 'generative': True, 'low': 0, 'high': 50, 'owner': 'link', 'type': 'resource'}], 'save_dir': 'dataset/v_nets', 'v_nets_file_name': 'v_net.gml', 'v_nets_save_dir': 'v_nets', 'events_file_name': 'events.yaml', 'setting_file_name': 'v_sim_setting.yaml'}, num_p_net_node_attrs=2, num_p_net_link_attrs=3, num_v_net_node_attrs=1, num_v_net_link_attrs=1, run_time='20230419T124845', host_name='hnd', run_id='hnd-20230419T124845')


TO UNDERSTAND :
? v_sim_setting_high_request=30, ?v_sim_setting_num_v_nets=1000? 
node_resource_unit_price=1.0, link_resource_unit_price=1.0, ?
matching_mathod='greedy'?
num_workers=10,? alors que parralle false
coef_critic_loss=0.5, coef_entropy_loss?

tricks in rl.yaml

check file .gml .yaml



MORE DETAILS:
 v_sim_setting (dict): A dictionary containing the setting for the virtual network request simulator.
        num_v_nets (int): The number of virtual networks to be simulated.
        aver_arrival_rate (float): The average arrival rate of virtual network requests.
        aver_lifetime (float): The average lifetime of virtual network requests.
        v_nets (list): A list of VirtualNetwork objects representing the virtual networks.
        events (list): A list of tuples representing the events in the simulation.

    Methods:
        from_setting: Create a VirtualNetworkRequestSimulator object from a setting file.

        renew: Renew virtual networks and events.
        renew_v_nets: Renew virtual networks.
        renew_events: Renew events.
        arrange_events: Arrange events in chronological order.
        construct_v2event_dict: Construct a dictionary for mapping virtual network id to event id.

        
 controller (Controller): The controller object.
            recorder (Recorder): The recorder object.
            counter (Counter): The counter object.
            **kwargs (dict): A dictionary containing the optional arguments:
                reusable (bool): Whether to reuse resources (default: False).
                verbose (int): Verbosity level (default: 1).
                save_dir (str): Directory to save output files (default: 'save').
                solver_name (str): Name of the solver (default: 'unknown_solver').
                run_id (str): ID of the run (default: 'unknown_host-unknown_time').
                node_ranking_method (str): Method used for ranking nodes (default: 'order').
                link_ranking_method (str): Method used for ranking links (default: 'order').
                matching_mathod (str): Method used for node mapping (default: 'greedy').
                shortest_method (str): Method used for link mapping (default: 'k_shortest').
                k_shortest (int): Number of shortest paths to consider (default: 10).
                allow_rejection (bool): Whether to allow v-nets to be rejected (default: False).
                allow_revocable (bool): Whether to allow v-nets to be revoked (default: False).



DONE :
num_p_net_node_attrs=2 (cpu ,max cpu) , num_p_net_link_attrs=3 (bw, max_bw,latency), 
num_v_net_node_attrs=1, num_v_net_link_attrs=1?



NOTE:

Physic :'topology': {'type': 'waxman', 'wm_alpha': 0.5, 'wm_beta': 0.2}

virtual : 'topology': {'random_prob': 0.5, 'type': 'random'}
          arrival_rate': {'distribution': 'possion'
          'lifetime': {'distribution': 'exponential',
          cpu 0 ,50
          bw 0, 50

 link=====> bw and latency (latency est en commentaire pour virtual uniquement dans fichier v_sim_setting.yaml)
 node =====>cpu